Resources:
  PublishTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      TopicName: "#{AWS::StackName}-publish"
  # SNS Topic for failed workflows
  FailedTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      TopicName: "#{AWS::StackName}-failed"
  # Process Queue
  ProcessQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "#{AWS::StackName}-process"
      VisibilityTimeout: 60
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ProcessDeadLetterQueue.Arn
        maxReceiveCount: 5
  ProcessDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "#{AWS::StackName}-process-dead-letter"
  UpdateStateDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "#{AWS::StackName}-update-state-dead-letter"
  StateTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: collections_workflow
          AttributeType: S
        - AttributeName: itemids
          AttributeType: S
        - AttributeName: state_updated
          AttributeType: S
        - AttributeName: updated
          AttributeType: S
      KeySchema:
        - AttributeName: collections_workflow
          KeyType: HASH
        - AttributeName: itemids
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: "state_updated"
          KeySchema:
            - AttributeName: collections_workflow
              KeyType: HASH
            - AttributeName: state_updated
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: "updated"
          KeySchema:
            - AttributeName: collections_workflow
              KeyType: HASH
            - AttributeName: updated
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      TableName: "#{AWS::StackName}-state"
  BatchJobRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
            Action:
              - "sts:AssumeRole"
            Condition:
              ArnLike:
                aws:SourceArn: "arn:aws:ecs:#{AWS::Region}:#{AWS::AccountId}:*"
              StringEquals:
                aws:SourceAccount: "#{AWS::AccountId}"
      Path: "/"
      Policies:
        - PolicyName: "Cirrus"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                Resource:
                  - !Join
                    - ""
                    - - "arn:aws:s3:::"
                      - ${self:provider.environment.CIRRUS_DATA_BUCKET}
                      - "*"
                  - !Join
                    - ""
                    - - "arn:aws:s3:::"
                      - ${self:provider.environment.CIRRUS_PAYLOAD_BUCKET}
                      - "*"
              - Effect: "Allow"
                Action:
                  - "s3:ListBucket"
                  - "s3:GetObject"
                  - "s3:GetBucketLocation"
                Resource: "*"
              - Effect: "Allow"
                Action: secretsmanager:GetSecretValue
                Resource:
                  - arn:aws:secretsmanager:#{AWS::Region}:#{AWS::AccountId}:secret:cirrus*
              - Effect: "Allow"
                Action:
                  - lambda:GetFunction
                Resource:
                  - arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:#{AWS::StackName}-*
  BatchInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: BatchInstanceRole
  BatchInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
  EC2SpotRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "spotfleet.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole
